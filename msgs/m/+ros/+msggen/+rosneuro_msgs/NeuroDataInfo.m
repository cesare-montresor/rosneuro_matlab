
classdef NeuroDataInfo < ros.Message
    %NeuroDataInfo MATLAB implementation of rosneuro_msgs/NeuroDataInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rosneuro_msgs/NeuroDataInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6662e2f96240b54d66e954d119b2ab01' % The MD5 Checksum of the message definition
        PropertyList = { 'Nsamples' 'Nchannels' 'Stride' 'Unit' 'Transducter' 'Prefiltering' 'Isint' 'Minmax' 'Labels' } % List of non-constant message properties
        ROSPropertyList = { 'nsamples' 'nchannels' 'stride' 'unit' 'transducter' 'prefiltering' 'isint' 'minmax' 'labels' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Nsamples
        Nchannels
        Stride
        Unit
        Transducter
        Prefiltering
        Isint
        Minmax
        Labels
    end
    methods
        function set.Nsamples(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Nsamples');
            obj.Nsamples = uint16(val);
        end
        function set.Nchannels(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Nchannels');
            obj.Nchannels = uint16(val);
        end
        function set.Stride(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Stride');
            obj.Stride = uint16(val);
        end
        function set.Unit(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Unit');
            obj.Unit = char(val);
        end
        function set.Transducter(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Transducter');
            obj.Transducter = char(val);
        end
        function set.Prefiltering(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Prefiltering');
            obj.Prefiltering = char(val);
        end
        function set.Isint(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Isint');
            obj.Isint = uint8(val);
        end
        function set.Minmax(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Minmax');
            obj.Minmax = double(val);
        end
        function set.Labels(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NeuroDataInfo', 'Labels');
            obj.Labels = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rosneuro_msgs.NeuroDataInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rosneuro_msgs.NeuroDataInfo;
            obj.reload(strObj);
        end
    end
end

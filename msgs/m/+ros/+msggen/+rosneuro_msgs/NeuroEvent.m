
classdef NeuroEvent < ros.Message
    %NeuroEvent MATLAB implementation of rosneuro_msgs/NeuroEvent
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rosneuro_msgs/NeuroEvent' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3a8c5f4baff67d7c19c4d57687c8af3b' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Version' 'Event' 'Duration' 'Family' 'Description' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'version' 'event' 'duration' 'family' 'description' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Version
        Event
        Duration
        Family
        Description
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Header')
            obj.Header = val;
        end
        function set.Version(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Version');
            obj.Version = char(val);
        end
        function set.Event(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Event');
            obj.Event = int32(val);
        end
        function set.Duration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Duration');
            obj.Duration = single(val);
        end
        function set.Family(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Family');
            obj.Family = int32(val);
        end
        function set.Description(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroEvent', 'Description');
            obj.Description = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rosneuro_msgs.NeuroEvent.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rosneuro_msgs.NeuroEvent;
            obj.reload(strObj);
        end
    end
end


classdef NeuroOutput < ros.Message
    %NeuroOutput MATLAB implementation of rosneuro_msgs/NeuroOutput
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rosneuro_msgs/NeuroOutput' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '882238bbda5d3d3c1295fd2f1765efcf' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Softpredict' 'Hardpredict' 'ClassLabels' 'DecoderType' 'DecoderPath' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'softpredict' 'hardpredict' 'class_labels' 'decoder_type' 'decoder_path' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
			 'ros.msggen.rosneuro_msgs.NeuroDataFloat' ...
			 'ros.msggen.rosneuro_msgs.NeuroDataInt32' ...
			 '' ...
			 '' ...
			 '' ...
			 } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Softpredict
        Hardpredict
        ClassLabels
        DecoderType
        DecoderPath
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'Header')
            obj.Header = val;
        end
        function set.Softpredict(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.rosneuro_msgs.NeuroDataFloat'};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'Softpredict')
            obj.Softpredict = val;
        end
        function set.Hardpredict(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.rosneuro_msgs.NeuroDataInt32'};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'Hardpredict')
            obj.Hardpredict = val;
        end
        function set.ClassLabels(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'ClassLabels');
            obj.ClassLabels = cell(val);
        end
        function set.DecoderType(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'DecoderType');
            obj.DecoderType = char(val);
        end
        function set.DecoderPath(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'NeuroOutput', 'DecoderPath');
            obj.DecoderPath = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rosneuro_msgs.NeuroOutput.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rosneuro_msgs.NeuroOutput;
            obj.reload(strObj);
        end
    end
end
